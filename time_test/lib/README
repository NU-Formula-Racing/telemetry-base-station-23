This project encompasses a series of tests to study and optimize the physical timing constraints for LoRa and the comms program.
In particular, it exists to maximise the rate of reception, minimise the rate of transmission, and synchronise multiple-timers.
Their description and results are described below:

1) Packet size test: determine how packet size of transmission affects the rate
-  The program has been reduced to a simple comm program akin to a template for testing a communication channel.
   The TX still ticks a CAN bus, but only transmits a packet number (`packetnum`) + initial data in its `packet`.
   The send buffer size is arbitrarily specified within the program and is the controlled variable for testing.
   All delays prior to sending data are commented out for potential maximisation of speed.
   
-  The RX simply receives the buffer, prints out its size, reads the `packetnum`, and prints it.

-  The receiver runs at 1 ms (ideally), and the transceiver runs at 1 s.

-  The buffer size is varied, and the output on the TX is monitored over time with both the output data and time elapsed recorded.
   Once sufficient time has passed, transmission stops and both the elapsed time and `packetnum` of final message are recorded.
   From there, the rate of transmission, or the number of messages per second, is recorded.

-  This test assumes that transmission time is ignored if a receiver does not obtain its message.

-  Results of this test are written below:

| Packet size | Time elapsed (s) | Max packetnum | Rate (#/s) |
|-------------|------------------|---------------|------------|
| 251 (max)   | 89.94            | 224           | 2.491      |
| 128         | 90.01            | 406           | 4.511      |
| 64          | 143.97           | 1162          | 8.071      |
| 32          | 193.80           | 2517          | 12.988     |
| 16          | 205.13           | 3592          | 17.511     |
| 8           | 217.58           | 5239          | 23.968     |
| 4 (test min)| 210.83           | 5759          | 27.316     |

-  Analysing the data via MATLAB motivates the relation between $P$ packet size and $R$ transmission rate to be

   $$R \sim \frac{1}{a P + b}$$

-  Performing the regression yields the coefficients $a = 0.0015$, $b = 0.0308$.

-  As a testament to the accuracy of this fit, the correlation between $P$ and $\frac{1}{R}$ is 0.9999, indicating
   that this model strongly resembles the relation between transmission packet size and reception.

2) Receiver timer test: determine how quickly RX can obtain data without breaking
-  The TX ticks a CAN bus, transmits a packet number (`packetnum`) + initial data in its `packet`.
   The send buffer size is set to its lowest possible value (4), with no delays between loops.
   
-  The RX receives the buffer, reads the `packetnum`, prints it, and increments a `counter` for the number of
   received messages.

-  The receiver runs at 1 ms (ideally), and the transceiver runs at arbitrarily specified times. These times
   are specified in the RX macro block of `main.cpp`'s `setup`.
   
-  RX times start at 1 s (1000 ms) and descends until functionality stops or strange behavior occurs.

-  For each test, the TX is run for a minute, and the RX's output is observed. After 1 minute elapses
   from the start of Serial output, the TX is turned off and the last transmitted `packetnum` is recorded.

-  The RX, when no messages are available and some transmissions have occurred, will print the `counter`
   instead. If possible, this only occurs once, after which the RX terminates in an unbreaking loop.
   However, as the RX rate approaches the TX rate (from Test 1), this self-termination may be infeasible.

-  The final `packetnum` and `counter` values as well as any changes in behavior are recorded below: 

| RX time (ms) | Final packetnum | RX count | Comments                                             |
|--------------|-----------------|----------|------------------------------------------------------|
| 1000         | 1658            | 62       | Smooth reception                                     |
| 500          | 1668            | 123      |                                                      |
| 250          | 1648            | 242      |                                                      |
| 100          | 1653            | 601      | Msg sometimes does not reach LoRa before reading     |
| 50           | 1657            | 762      | Frequently lacks msg up to 1/3rd the time            |
| 25           | 1654            | 888      | At least half (majority) of loops do not receive     |
| 20           | 1659            | 870      |                                                      |
| 15           | (unretrievable) | 946      |                                                      | 
| 10           | N/A             | 1057     | Ctr increases about as fast as RX rate (>20 #/s)     |
| 5            | N/A             | 1164     |                                                      |
| 1            | N/A             | 1650     | Nearly all loops lack a msg                          |

-  The number of transmissions should ideally be equal to

   (rate for 4 byte TX) * (1 min) = 27.316 (#/s) * 60 (s) = 1639.0

-  Looking at the number of RXs, loops start to become wasteful below 100 ms, with no data being read
   during that time increment. The number of RXs begins to saturate within 100-20 ms as it approaches
   the TX rate. Below 20 ms, the counter climbs again, though not at an inversely proportional rate.

-  At 1 ms, however, the rate closely matches the ideal TX rate, with the compromise being that
   most of the loops simply do not read data, but they can readily loop back and capture new data.

-  For efficiency, and with the anticipation that the final BS will be more time-expensive than 1 ms
   allows, a favorable RX rate should lie somewhere between 50-20 ms, with at least half of the loops
   being used to actually read new messages.

-  This test also disproves the previous paradigm that the RX rate must be well below the TX rate, as
   the RX still functions even when its reception rate is much greater than the transmission rate.

3) TX-RX rate match procedure to maximize efficiency for loops
-  This method attempts to identify a RX rate that most closely follows a measured TX rate that
   minimizes lost TX packets simultaneously with idling RX loops. Due to slight processor irregularities
   on both ends and the timer quantization limit of ms, this rate should ideally be slightly faster
   than the TX rate.

-  Let $r_t$ = TX rate in Hz. The TX consists of the same functionality as in Test 2 but with a 
   constant transmission packet size of 32. This rate empirically has the value of $r_t = 12.988$.

-  Let $T_t$ = TX period in ms, which is the actual timing period and is longer than the one input in `main.c`.
   The period and the rate share the following relation:

   $$T_t = \frac{1000}{r_t} = 76.994$$

-  Round down $T_t$ to the nearest millisecond. This becomes $T_r = 76$, the ideal RX period.

-  Identify the delay in the RX system upon successful reception. The RX is first set up with two counters:
   - A `counter` for successful receptions of an RX packet
   - A `loop` count for total number of loops
   During a loop, the RX will check for an available packet. If it exists, read the buffer and increment the counter.
   This process has a delay, which is also artificially inflated by 5 ms to simulate the true processor.