### General

CAN Bus simulator accurate for projected NFR 22-23 sensors, including both fast and slow transmission
and the distinguishment of 2 busses, HI and LO, the maximum number available on our Teensy firmware board.

Generates values for all CAN sensors slated to be on the DAQ systems with the exception of Inverter.
The values are not designed to be realistic, but rather highly bounded and well-defined to make the
process of diagnosing errors from a firmware/communications engineering perspective easier.

Information on simulator dynamics can be found in the corresponding MATLAB file `stochastic_sims.m`
located in the project directory `matlab_refs/` in the same repo.

All program files are located in `src/main.cpp`, including signal declarations, initializations, and updating.
Bus-specific directives are blocked off using macros corresponding to each priority, which are controlled
via a separate file.

### Flashing

As of 2023, these are only tested on ESP32 boards as these are used for our CAN sims, but they should be
able to compile for Teensy boards as well as the differences in CAN interfacing using our library is trivial.

To compile for a specific priority board, uncomment one (and *only* one) `CAN_BUS_` macro in the `target.h`
file in `include/`. This will ensure that only the sensor values specific to that priority are instantiated
and simulated on that corresponding board.

To flash an ESP32, wait for the board to start connecting, then press and depress the button right of the
USB port on the ESP32. A successful flash should show addresses and progress percentages on the build log.